{"mappings":"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","sources":["../dist/index.js","main.ts"],"sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Slumpa_instances, _a, _Slumpa_initialSeed, _Slumpa_seed, _Slumpa_setOf, _Slumpa_knuthShuffle, _Slumpa_mulberry32, _Slumpa_ensureNumberSeed;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Slumpa = void 0;\nclass Slumpa {\n    constructor(seed = Math.random() * Number.MAX_SAFE_INTEGER) {\n        _Slumpa_instances.add(this);\n        _Slumpa_initialSeed.set(this, void 0);\n        _Slumpa_seed.set(this, void 0);\n        __classPrivateFieldSet(this, _Slumpa_initialSeed, seed, \"f\");\n        __classPrivateFieldSet(this, _Slumpa_seed, __classPrivateFieldGet(this, _Slumpa_instances, \"m\", _Slumpa_ensureNumberSeed).call(this, seed), \"f\");\n    }\n    setSeed(seed) {\n        __classPrivateFieldSet(this, _Slumpa_seed, __classPrivateFieldGet(this, _Slumpa_instances, \"m\", _Slumpa_ensureNumberSeed).call(this, seed), \"f\");\n    }\n    getInitialSeed() {\n        return __classPrivateFieldGet(this, _Slumpa_initialSeed, \"f\");\n    }\n    getCurrentSeed() {\n        return __classPrivateFieldGet(this, _Slumpa_seed, \"f\");\n    }\n    integer(min, max) {\n        return Math.floor(__classPrivateFieldGet(this, _Slumpa_instances, \"m\", _Slumpa_mulberry32).call(this) * (max - min + 1)) + min;\n    }\n    integers(quantity, min, max) {\n        return __classPrivateFieldGet(Slumpa, _a, \"m\", _Slumpa_setOf).call(Slumpa, quantity, this.integer.bind(this), min, max);\n    }\n    float(min = 0, max = 1) {\n        return __classPrivateFieldGet(this, _Slumpa_instances, \"m\", _Slumpa_mulberry32).call(this) * (max - min + 1) + min;\n    }\n    floats(quantity, min = 0, max = 1) {\n        return __classPrivateFieldGet(Slumpa, _a, \"m\", _Slumpa_setOf).call(Slumpa, quantity, this.integer.bind(this), min, max);\n    }\n    item(items) {\n        const index = this.integer(0, items.length - 1);\n        return items[index];\n    }\n    items(quantity, items, putBack = false) {\n        if (putBack) {\n            return __classPrivateFieldGet(Slumpa, _a, \"m\", _Slumpa_setOf).call(Slumpa, quantity, this.item.bind(this), items);\n        }\n        else {\n            return this.shuffle(items).slice(0, quantity);\n        }\n    }\n    die(sides = 6) {\n        return this.integer(1, sides);\n    }\n    dice(numberOfDice, sides = 6) {\n        return __classPrivateFieldGet(Slumpa, _a, \"m\", _Slumpa_setOf).call(Slumpa, numberOfDice, this.die.bind(this), sides);\n    }\n    boolean(probability = 1 / 2) {\n        return this.float() > probability;\n    }\n    booleans(quantity, probability = 1 / 2) {\n        return __classPrivateFieldGet(Slumpa, _a, \"m\", _Slumpa_setOf).call(Slumpa, quantity, this.boolean.bind(this), probability);\n    }\n    shuffle(array) {\n        return __classPrivateFieldGet(this, _Slumpa_instances, \"m\", _Slumpa_knuthShuffle).call(this, array);\n    }\n    string(length, { useUppercase = true, useLowercase = true, useNumbers = true, useSpecials = true } = {}) {\n        const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        const numbers = '0123456789';\n        const specials = '~`!@#$%^&*()_-+={[}]|:;\"\\'<,>.?/';\n        const uppers = letters.toUpperCase();\n        const lowers = letters.toLowerCase();\n        const chars = (useUppercase ? uppers : '') + (useLowercase ? lowers : '') + (useNumbers ? numbers : '') + (useSpecials ? specials : '');\n        return this.items(length, chars.split(''), true).join('');\n    }\n    date(from, to) {\n        from.setHours(0, 0, 0, 0);\n        to.setHours(23, 59, 59, 999);\n        const date = this.integer(from.getTime(), to.getTime());\n        return new Date(date);\n    }\n    dates(quantity, from, to) {\n        return __classPrivateFieldGet(Slumpa, _a, \"m\", _Slumpa_setOf).call(Slumpa, quantity, this.date.bind(this), from, to);\n    }\n}\nexports.Slumpa = Slumpa;\n_a = Slumpa, _Slumpa_initialSeed = new WeakMap(), _Slumpa_seed = new WeakMap(), _Slumpa_instances = new WeakSet(), _Slumpa_setOf = function _Slumpa_setOf(quantity, randomizer, ...inputs) {\n    return new Array(quantity).fill(0).map(() => randomizer.call(this, ...inputs));\n}, _Slumpa_knuthShuffle = function _Slumpa_knuthShuffle(array) {\n    let currentIndex = array.length;\n    let randomIndex;\n    while (currentIndex != 0) {\n        randomIndex = Math.floor(__classPrivateFieldGet(this, _Slumpa_instances, \"m\", _Slumpa_mulberry32).call(this) * currentIndex);\n        currentIndex--;\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n    return array;\n}, _Slumpa_mulberry32 = function _Slumpa_mulberry32() {\n    let t = (__classPrivateFieldSet(this, _Slumpa_seed, __classPrivateFieldGet(this, _Slumpa_seed, \"f\") + 0x6d2b79f5, \"f\"));\n    t = Math.imul(t ^ (t >>> 15), t | 1);\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n}, _Slumpa_ensureNumberSeed = function _Slumpa_ensureNumberSeed(a) {\n    const str = a.toString();\n    if (!str || /^0+$/.test(str))\n        return Math.random() * 10000000;\n    if (/^-?\\d+$/.test(str) && str.length < 20)\n        return parseInt(str.replace(/^(-?)0+/, '$1'), 10);\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        const character = str.charCodeAt(i);\n        hash = (hash << 5) - hash + character;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n};\n","import { Slumpa } from '../dist'\nconst s = new Slumpa('boll')\n\nonFormSubmit('frmRandomInt', (form) => {\n  form.result.value = s.integer(parseInt(form.min.value), parseInt(form.max.value))\n})\n\nonFormSubmit('frmRandomItem', (form) => {\n  const animals = ['Horse', 'Monkey', 'Cow', 'Dog', 'Cat']\n  form.result.value = s.item(animals)\n})\n\nfunction onFormSubmit(formId: string, submitCallback: (form: HTMLFormElement) => void) {\n  const form = getFormById(formId)\n  form.addEventListener('submit', (ev) => {\n    ev.preventDefault()\n    submitCallback(form)\n  })\n}\n\nfunction getFormById(id: string): HTMLFormElement {\n  const form = document.getElementById(id)\n  if (!form) throw Error('elem not found')\n  return form as HTMLFormElement\n}\n"],"names":["$60570fd3f2be92ce$var$_Slumpa_instances","$60570fd3f2be92ce$var$_a","$60570fd3f2be92ce$var$_Slumpa_initialSeed","$60570fd3f2be92ce$var$_Slumpa_seed","$60570fd3f2be92ce$var$_Slumpa_setOf","$60570fd3f2be92ce$var$_Slumpa_knuthShuffle","$60570fd3f2be92ce$var$_Slumpa_mulberry32","$60570fd3f2be92ce$var$_Slumpa_ensureNumberSeed","$60570fd3f2be92ce$var$__classPrivateFieldSet","$60570fd3f2be92ce$exports","__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","$60570fd3f2be92ce$var$__classPrivateFieldGet","__classPrivateFieldGet","get","Object","defineProperty","Slumpa","$60570fd3f2be92ce$var$Slumpa","seed","Math","random","Number","MAX_SAFE_INTEGER","add","this","setSeed","seed1","getInitialSeed","getCurrentSeed","integer","min","max","floor","integers","quantity5","min1","max1","bind","float","min2","max2","floats","quantity1","min3","max3","item","items","length","quantity2","items1","putBack","shuffle","slice","die","sides","dice","numberOfDice","sides1","boolean","probability","booleans","quantity3","probability1","array1","string","useUppercase","useLowercase","useNumbers","useSpecials","letters","uppers","toUpperCase","lowers","toLowerCase","chars","split","join","date","from","to","setHours","getTime","Date","dates","quantity4","from1","to1","WeakMap","WeakSet","quantity","randomizer","inputs","Array","fill","map","array","randomIndex","currentIndex","t","imul","a","str","toString","test","parseInt","replace","hash","i","charCodeAt","$b2cb94b4b0bbae51$var$s","$b2cb94b4b0bbae51$var$onFormSubmit","formId","submitCallback","form","id","document","getElementById","Error","$b2cb94b4b0bbae51$var$getFormById","addEventListener","ev","preventDefault","result"],"version":3,"file":"index.44527e72.js.map"}